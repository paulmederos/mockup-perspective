// Generated by CoffeeScript 1.7.1
(function() {
  var calculateSliderFill, face, light, onDragEnd, onDragMove, prepareRotationSlider, rotateView, updateSlider, xRotationVal, yRotationVal, zRotationVal;

  xRotationVal = 180;

  yRotationVal = 180;

  zRotationVal = 180;

  light = new Photon.Light(-100, -300, 0);

  face = new Photon.Face($('.face-1')[0], 1, .2, true);

  face.render(light, true);

  $(function() {
    prepareRotationSlider($('.slide-control-rotateX'), xRotationVal);
    prepareRotationSlider($('.slide-control-rotateY'), yRotationVal);
    prepareRotationSlider($('.slide-control-rotateZ'), zRotationVal);
    $('.action-reset').on('click', function() {
      xRotationVal = 180;
      yRotationVal = 180;
      zRotationVal = 180;
      return rotateView();
    });
    $('.action-perspective').on('click', function() {
      xRotationVal = 236;
      yRotationVal = 180;
      zRotationVal = 140;
      prepareRotationSlider($('.slide-control-rotateX'), xRotationVal);
      prepareRotationSlider($('.slide-control-rotateY'), yRotationVal);
      prepareRotationSlider($('.slide-control-rotateZ'), zRotationVal);
      return rotateView();
    });
    return $('.cool').on('animationend', function() {
      return console.log('done with animation');
    });
  });

  prepareRotationSlider = function($slideControl, rotationVal) {
    var domElement, draggie, preFilled;
    preFilled = rotationVal / 360 * 100;
    $slideControl.children('.slide-knob').css('left', preFilled + '%');
    $slideControl.children('.slide-filled').css('width', preFilled + 1 + '%');
    domElement = $slideControl.children('.draggable')[0];
    draggie = new Draggabilly(domElement, {
      axis: "x",
      containment: $slideControl
    });
    draggie.on('dragMove', onDragMove);
    return draggie.on('dragEnd', onDragEnd);
  };

  onDragMove = function(instance, event, pointer) {
    var $triggerKnob, sliderFill;
    $triggerKnob = $(instance.element);
    sliderFill = calculateSliderFill(instance);
    switch ($triggerKnob.parents('.slide-control').data('type')) {
      case 'rotateX':
        xRotationVal = Math.round(sliderFill * 360);
        updateSlider($triggerKnob, xRotationVal, sliderFill);
        break;
      case 'rotateY':
        yRotationVal = Math.round(sliderFill * 360);
        updateSlider($triggerKnob, yRotationVal, sliderFill);
        break;
      case 'rotateZ':
        zRotationVal = Math.round(sliderFill * 360);
        updateSlider($triggerKnob, zRotationVal, sliderFill);
    }
    rotateView();
  };

  onDragEnd = function(instance, event, pointer) {
    $(instance.element).children(".slide-value-modal").removeClass("visible");
  };

  calculateSliderFill = function(draggableInstance) {
    var sliderFill;
    sliderFill = draggableInstance.position.x / draggableInstance.containerSize.width;
    sliderFill = (sliderFill < 0 ? 0 : sliderFill);
    return sliderFill;
  };

  updateSlider = function($triggerKnob, newValue, fillAmount) {
    $triggerKnob.siblings(".slide-filled").css("width", Math.round(fillAmount * 100) + "%");
    $triggerKnob.children(".slide-value-modal").html(newValue);
    return $triggerKnob.children(".slide-value-modal").addClass("visible");
  };

  rotateView = function() {
    var newBoxShadow, newTransformation;
    newTransformation = 'rotateX(' + xRotationVal + 'deg) rotateY(' + yRotationVal + 'deg) rotateZ(' + zRotationVal + 'deg)';
    newBoxShadow = '-' + (xRotationVal / 2) + 'px ' + (yRotationVal / 2) + 'px ' + (zRotationVal / 2) + 'px rgba(0,0,0,.2)';
    $('.cool').removeClass('animated fadeInDown');
    $('.cool').css({
      '-webkit-transform': newTransformation,
      'box-shadow': newBoxShadow
    });
    return face.render(light, true);
  };

}).call(this);
